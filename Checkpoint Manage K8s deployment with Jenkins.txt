https://github.com/H-JEMAI/DevOps/blob/main/Checkpoint%20Manage%20K8s%20deployment%20with%20Jenkins.txt

Checkpoint Manage K8s deployment with Jenkins 


Prepare jenkins to create a deployment to a kubernetes cluster


     
    Create a Namespace
    Create a service account with Kubernetes sudo permissions  
    Create local persistent volume for persistent Jenkins data on Pod restarts
    Create a deployment YAML and deploy it. 
    Create a service YAML and deploy it.
    Access the Jenkins application on a Node Port.

============

       git clone  [github project link or bitbucket project link] 
       kubectl create namespace devops
       kubectl get namespaces
       kubectl apply -f serviceAccount.yaml

       kubectl get nodes
       kubectl create -f volume.yaml
       # deployment.yaml file
       kubectl create -f jenkins-deployment.yaml --namespace jenkins
       kubectl get deployments -n devops
       kubectl  describe deployments --namespace=jenkins
       #jenkins-service.yaml 
       kubectl create -f jenkins-service.yaml --namespace jenkins
       # http://node_ip_address:4000   to access jenkins dashboard
       kubectl get pods --namespace jenkins
       kubectl logs jenkins-deployment-45345423412-k9003 --namespace jenkins
       



# yaml deployment file
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment  #  may be deployment , service ,replicaset,pod ,namespace, job
metadata:
  name: react-deployment #  Deployment name
spec:
  selector: 
    matchLabels:
      app: NODE # pour relier 2 pods in this case : relier react avec NODE
  replicas: 5 # tells deployment to run 1 pods matching the template
  template:
    metadata:
      labels:
        app: react  # name pod
    spec:
      containers:
        - name: react
          image: techexpert.azurecr.io/cockpit-front:aksv1  # image pod
          tty: true   #  == docker  run -it -p 3000:3000 image docker   () #_i t)
          ports:
            - containerPort: 3000  # port is the same port exposed in docker file


---
# https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service

kind: Service  
apiVersion: v1
metadata:
  name: react-service  # name  of service
spec:
  selector:
    app: react # linked to pod  "react " ligne 15
  ports:
    - protocol: TCP   # protocolr type always TCP rarely udp  
      port: 80
      targetPort: 3000  # port is the same port of the container port

  type: LoadBalancer



# 3 types of service :

# cluster ip communicate beetween 2 pods that not be accessible from exernal
# node port permet un pod accessible depuis l'exterieur
# loadbalancer  is used when relicaset is > 1  == to 2 or 3 or more
#  NOTE THAT  IF THE REPLICASET == 1 there is no load balancer 

# ETCD in node master  contains logs history  every event pass by it



#  #
#FROM node:12.22-buster


# WORKDIR /App
# copier les dependences pour le porjet react ( chaque langue a sa propre dependences)

# COPY package *.json /App/
# install dependences
# RUN npm install
#copier les fichers sources 
# COPY  . /App

# le command a excute pour lance le projet ( pour cr√©er conteneur)
# CMD ["npm","run","start" ]
